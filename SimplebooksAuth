package Demo1;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class simplebooks {

    private static String accessToken;
    private static int bookId;
    private static String orderId;
    String uniqueEmail = "iyappa" + System.currentTimeMillis() + "@qa.com";


    @BeforeClass
    public void setup() {
        // Base URI of Simple Books API
        RestAssured.baseURI = "https://simple-books-api.glitch.me";
    }

    @Test(priority = 1)
    public void testApiStatus() {
        given()
        .when()
            .get("/status")
        .then()
            .statusCode(200)
            .body("status", equalTo("OK"));
    }

    @Test(priority = 2)
    public void registerClient() {
        Map<String, Object> payload = new HashMap<>();
        payload.put("clientName", "Iyappan");
        payload.put("clientEmail", uniqueEmail);


        Response response = given()
            .contentType(ContentType.JSON)
            .body(payload)
        .when()
            .post("/api-clients")
        .then()
            .statusCode(201)
            .extract().response();

        System.out.println("Response Body:\n" + response.asPrettyString());

        accessToken = response.jsonPath().getString("accessToken");
        System.out.println("Access Token: " + accessToken);

        Assert.assertNotNull(accessToken, "Access token should not be null");
    }

    @Test(priority = 3)
    public void getListOfBooks() {
        Response response = given()
        .when()
            .get("/books")
        .then()
            .statusCode(200)
            .body("books.size()", greaterThan(0))
            .extract().response();

        System.out.println("Response Body:\n" + response.asPrettyString());

        bookId = response.jsonPath().getInt("[0].id");
        Assert.assertTrue(bookId > 0, "Book ID should be greater than 0");
    }

    
    @Test(priority = 4)
    public void getSingleBook() {
        given()
        .when()
            .get("/books/{id}", bookId)
        .then()
            .statusCode(200)
            .body("id", equalTo(bookId));
    }

    @Test(priority = 5)
    public void postOrderBook() {
        Map<String, Object> payload = new HashMap<>();
        payload.put("bookId", bookId);
        payload.put("customerName", "John Doe");

        Response response = given()
            .header("Authorization", "Bearer " + accessToken)
            .contentType(ContentType.JSON)
            .body(payload)
        .when()
            .post("/orders")
        .then()
            .statusCode(201)
            .extract().response();

        orderId = response.jsonPath().getString("orderId");
        Assert.assertNotNull(orderId, "Order ID should not be null");
    }

    @Test(priority = 6)
    public void updateOrderPatch() {
        Map<String, Object> updatePayload = new HashMap<>();
        updatePayload.put("customerName", "Jane Doe");

        given()
            .header("Authorization", "Bearer " + accessToken)
            .contentType(ContentType.JSON)
            .body(updatePayload)
        .when()
            .patch("/orders/{orderId}", orderId)
        .then()
            .statusCode(204);
    }

    @Test(priority = 7)
    public void deleteOrder() {
        given()
            .header("Authorization", "Bearer " + accessToken)
        .when()
            .delete("/orders/{orderId}", orderId)
        .then()
            .statusCode(204);
    }
    
}
