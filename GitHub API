package Demo1;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;

public class GitHub {

    String repoName = "Repo_using_API";
    String repoUpdate = "New_name_via_API";
    String username = "iyappaqaon"; 

    @BeforeClass
    public void setup() {
        RestAssured.baseURI = "https://api.github.com";
        RestAssured.authentication = oauth2("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");
    }

    @Test(priority = 1)
    public void getAllRepositories() {
        Response response = given()
            .when()
            .get("/user/repos");

        response.then().statusCode(200);
       // System.out.println("GET Repos:\n" + response.getBody().asPrettyString());
    }

    @Test(priority = 2)
    public void createRepository() {
        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("name", repoName);
        requestBody.put("description", "Repo created");
        requestBody.put("private", false);

        Response response = given()
            .contentType(ContentType.JSON)
            .body(requestBody)
            .when()
            .post("/user/repos");

        response.then()
            .statusCode(201)
            .body("name", equalTo(repoName));
        try {
            Thread.sleep(10000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            e.printStackTrace();
        }

      //  System.out.println("Create Repo:\n" + response.getBody().asPrettyString());
    }

    @Test(priority = 3)
    public void updateRepository() {
        Map<String, Object> updateBody = new HashMap<>();
        updateBody.put("name", repoUpdate);
        updateBody.put("description", "Updated via REST Assured");

        Response response = given()
            .contentType(ContentType.JSON)
            .body(updateBody)
            .when()
            .patch("/repos/" + username + "/" + repoName);

        response.then()
            .statusCode(200)
            .body("description", equalTo("Updated via REST Assured"));
        try {
            Thread.sleep(10000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            e.printStackTrace();
        }
       // System.out.println("Update Repo:\n" + response.getBody().asPrettyString());
    }

    @Test(priority = 4)
    public void deleteRepository() {
        Response response = given()
            .when()
            .delete("/repos/" + username + "/New_name_via_API");

        response.then().statusCode(204);
        System.out.println("Repository deleted successfully.");
    }
}

